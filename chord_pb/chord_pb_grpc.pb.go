// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: chord_pb/chord_pb.proto

package chord_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChordNodeClient is the client API for ChordNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChordNodeClient interface {
	// rpc Join(NodeAddr) returns (NodeAddr) {} // Return found successor
	// rpc GetPred(NodeAddr) returns (NodeAddr) {} // Return found predecessor
	// rpc GetNodeInfo(NodeAddr) returns (NodeInfo) {} // Return full info of the node
	// rpc Notify(NodeAddr) returns (NodeInfo) {} //  Return full info of the new successor
	MapGet(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeyVal, error)
	MapPut(ctx context.Context, in *KeyVal, opts ...grpc.CallOption) (*KeyVal, error)
	MapDelete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Key, error)
}

type chordNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewChordNodeClient(cc grpc.ClientConnInterface) ChordNodeClient {
	return &chordNodeClient{cc}
}

func (c *chordNodeClient) MapGet(ctx context.Context, in *Key, opts ...grpc.CallOption) (*KeyVal, error) {
	out := new(KeyVal)
	err := c.cc.Invoke(ctx, "/chord_pb.ChordNode/MapGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordNodeClient) MapPut(ctx context.Context, in *KeyVal, opts ...grpc.CallOption) (*KeyVal, error) {
	out := new(KeyVal)
	err := c.cc.Invoke(ctx, "/chord_pb.ChordNode/MapPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordNodeClient) MapDelete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/chord_pb.ChordNode/MapDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordNodeServer is the server API for ChordNode service.
// All implementations must embed UnimplementedChordNodeServer
// for forward compatibility
type ChordNodeServer interface {
	// rpc Join(NodeAddr) returns (NodeAddr) {} // Return found successor
	// rpc GetPred(NodeAddr) returns (NodeAddr) {} // Return found predecessor
	// rpc GetNodeInfo(NodeAddr) returns (NodeInfo) {} // Return full info of the node
	// rpc Notify(NodeAddr) returns (NodeInfo) {} //  Return full info of the new successor
	MapGet(context.Context, *Key) (*KeyVal, error)
	MapPut(context.Context, *KeyVal) (*KeyVal, error)
	MapDelete(context.Context, *Key) (*Key, error)
	mustEmbedUnimplementedChordNodeServer()
}

// UnimplementedChordNodeServer must be embedded to have forward compatible implementations.
type UnimplementedChordNodeServer struct {
}

func (UnimplementedChordNodeServer) MapGet(context.Context, *Key) (*KeyVal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapGet not implemented")
}
func (UnimplementedChordNodeServer) MapPut(context.Context, *KeyVal) (*KeyVal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapPut not implemented")
}
func (UnimplementedChordNodeServer) MapDelete(context.Context, *Key) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapDelete not implemented")
}
func (UnimplementedChordNodeServer) mustEmbedUnimplementedChordNodeServer() {}

// UnsafeChordNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChordNodeServer will
// result in compilation errors.
type UnsafeChordNodeServer interface {
	mustEmbedUnimplementedChordNodeServer()
}

func RegisterChordNodeServer(s grpc.ServiceRegistrar, srv ChordNodeServer) {
	s.RegisterService(&ChordNode_ServiceDesc, srv)
}

func _ChordNode_MapGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordNodeServer).MapGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord_pb.ChordNode/MapGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordNodeServer).MapGet(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordNode_MapPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyVal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordNodeServer).MapPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord_pb.ChordNode/MapPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordNodeServer).MapPut(ctx, req.(*KeyVal))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordNode_MapDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordNodeServer).MapDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord_pb.ChordNode/MapDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordNodeServer).MapDelete(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

// ChordNode_ServiceDesc is the grpc.ServiceDesc for ChordNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChordNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chord_pb.ChordNode",
	HandlerType: (*ChordNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MapGet",
			Handler:    _ChordNode_MapGet_Handler,
		},
		{
			MethodName: "MapPut",
			Handler:    _ChordNode_MapPut_Handler,
		},
		{
			MethodName: "MapDelete",
			Handler:    _ChordNode_MapDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chord_pb/chord_pb.proto",
}
